package com.bank.service.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;

import com.bank.dao.dbutil.PostgresqlConnection;
import com.bank.exception.BusinessException;
import com.bank.main.BankServicesMain;
import com.bank.model.CustomerAccount;
import com.bank.model.Employee;
import com.bank.model.Transaction;
import com.bank.service.dao.BankServiceDAO;

public class BankServiceDAOImpl implements BankServiceDAO {

	private static Logger log = Logger.getLogger(BankServicesMain.class);
/**
 * for the employee to check all the customers information
 */
	@Override
	public List<CustomerAccount> getAllCustomerInfo() throws BusinessException {
		List<CustomerAccount> customerList = new ArrayList<>();
		try (Connection connection = PostgresqlConnection.getConnection()) {
			String sql = "select * from bankapplication.t_customers";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				CustomerAccount customer = new CustomerAccount();
				customer.setCustomerId(resultSet.getInt("customer_id"));
				customer.setName(resultSet.getString("customer_name"));
				customer.setEmail(resultSet.getString("customer_email"));
				customer.setPassword(resultSet.getString("customer_password"));
				customer.setUsername(resultSet.getString("customer_login"));
				customer.setDob(resultSet.getString("dob"));
				customerList.add(customer);
			}
			if (customerList.size() == 0) {
				throw new BusinessException("No customer in database so far");
			}
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal error occured contact SYSADMIN ");
		}
		return customerList;

	}
/**
 * create a customer bank account in database
 * @param customer
 */
	@Override
	public int createAccount(CustomerAccount customer) throws BusinessException {
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		int n = 0;

		try (Connection connection = PostgresqlConnection.getConnection()) {
			String sql_customer = "insert into bankapplication.t_customer "
					+ "(customer_id, customer_name, customer_email, customer_login, customer_password, dob) "
					+ "values (default, ?, ?, ?, ?, ?::date);";
			PreparedStatement cust_preparedStatement = connection.prepareStatement(sql_customer);
			cust_preparedStatement.setString(1, customer.getName());
			cust_preparedStatement.setString(2, customer.getEmail());
			cust_preparedStatement.setString(3, customer.getUsername());
			cust_preparedStatement.setString(4, customer.getPassword());
			cust_preparedStatement.setString(5, customer.getDob());
			cust_preparedStatement.executeUpdate();

			String sql_account = "insert into bankapplication.t_account "
					+ "(account_id, customer_id, balance, create_date, approved)"
					+ " values (default, (select max(t_customer.customer_id) from bankapplication.t_customer), ?, ?::date, false);";

			PreparedStatement acctPreparedStatement = connection.prepareStatement(sql_account);
			acctPreparedStatement.setDouble(1, customer.getBalance());
			acctPreparedStatement.setString(2, new Date().toString());

			n = acctPreparedStatement.executeUpdate();

			Date date = new Date();
			String trans_sql = "insert into bankapplication.t_transaction (transaction_id, from_account, to_account, amount, transaction_time, approved) "
					+ "values (default, (select max(t_account.account_id) from bankapplication.t_account), "
					+ "(select max(t_account.account_id) from bankapplication.t_account), ?, ?::date, false);";
			PreparedStatement transactionPreparedStatement = connection.prepareStatement(trans_sql);
			transactionPreparedStatement.setDouble(1, customer.getBalance());
			transactionPreparedStatement.setString(2, date.toString());
			transactionPreparedStatement.executeUpdate();

		} catch (ClassNotFoundException | SQLException e) {
			System.out.println(e);
			throw new BusinessException("Internal error occured contact SYSADMIN");
		}
		return n;
	}
/**
 * for customer to deposit and update their account balance
 * @param amount
 * @param customer
 */
	@Override
	public void deposit(double amount, CustomerAccount customer) throws BusinessException {
		System.out.println("Customer id: " + customer.getCustomerId());
		System.out.println("Status: " + customer.getApproved());
		if (customer.getApproved().equals("t")) {
			String sql = "update bankapplication.t_account set balance = ? where customer_id = ?;";
			try (Connection connection = PostgresqlConnection.getConnection()) {
				PreparedStatement ps = connection.prepareStatement(sql);
				ps.setDouble(1, customer.getBalance() + amount);
				ps.setInt(2, customer.getCustomerId());
				ps.executeUpdate();
				
				Date date = new Date();
				String trans_sql = "insert into bankapplication.t_transaction (transaction_id, from_account, to_account, amount, transaction_time, approved) "
						+ "values (default, ?, ?, ?, ?::date, false);";
				PreparedStatement transactionPreparedStatement = connection.prepareStatement(trans_sql);
				transactionPreparedStatement.setInt(1, customer.getAccountId());
				transactionPreparedStatement.setDouble(2, customer.getAccountId());
				transactionPreparedStatement.setDouble(3, amount);
				transactionPreparedStatement.setString(4, date.toString());
				transactionPreparedStatement.executeUpdate();

			} catch (ClassNotFoundException | SQLException e) {
				throw new BusinessException("Internal error occured contact SYSADMIN ");
			}
		} else {
			throw new BusinessException("Your account is not yet approved!");
		}
	}
	/**
	 * for customer to withdraw money and update their bank account balance
	 * @param amount
	 * @param customer
	 */
	@Override
	public void withdraw(double amount, CustomerAccount customer) throws BusinessException {
		log.info("Customer id: " + customer.getCustomerId());
		log.info("Status: " + customer.getApproved());
		if (customer.getApproved().equals("t") && customer.getBalance() >= amount) {
			String sql = "update bankapplication.t_account set balance = ? where customer_id = ?;";
			try (Connection connection = PostgresqlConnection.getConnection()) {
				PreparedStatement ps = connection.prepareStatement(sql);
				ps.setDouble(1, customer.getBalance() - amount);
				ps.setInt(2, customer.getCustomerId());
				ps.executeUpdate();
				
				Date date = new Date();
				String trans_sql = "insert into bankapplication.t_transaction (transaction_id, from_account, to_account, amount, transaction_time, approved) "
						+ "values (default, ?, ?, ?, ?::date, false);";
				PreparedStatement transactionPreparedStatement = connection.prepareStatement(trans_sql);
				transactionPreparedStatement.setInt(1, customer.getAccountId());
				transactionPreparedStatement.setDouble(2, customer.getAccountId());
				transactionPreparedStatement.setDouble(3, -amount);
				transactionPreparedStatement.setString(4, date.toString());
				transactionPreparedStatement.executeUpdate();

			} catch (ClassNotFoundException | SQLException e) {
				throw new BusinessException("Internal error occured contact SYSADMIN ");
			}
		} else {
			log.warn("Your account does not have enough balance to withdraw!");
			throw new BusinessException("Transaction rejected: No enough Balance");
		}

	}
	/**
	 * for customer to view their bank account balance
	 * @param customerId
	 * @throws SQLException 
	 * @throws ClassNotFoundException
	 */
	@Override
	public double getBalanceByCustomerId(int customerId) throws BusinessException {
		double balance;

		try (Connection connection = PostgresqlConnection.getConnection()) {
			String sql = "select balance from bankapplication.t_account where customer_id = ?;";

			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setInt(1, customerId);
			ResultSet resultSet = ps.executeQuery();

			if (resultSet.next()) {
				balance = resultSet.getDouble("balance");
			} else {
				throw new BusinessException("No account found with this ID: " + customerId);
			}
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal error occured contact SYSADMIN ");
		}
		return balance;
	}
	
	/**
	 * to get balance by searching account id
	 * @param accountId
	 * @throws SQLException 
	 * @throws ClassNotFoundException
	 *  */
	@Override
	public double getBalanceByAccountId(int accountId) throws BusinessException {
		double balance;

		try (Connection connection = PostgresqlConnection.getConnection()) {
			String sql = "select balance from bankapplication.t_account where account_id = ?;";

			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setInt(1, accountId);
			ResultSet resultSet = ps.executeQuery();

			if (resultSet.next()) {
				balance = resultSet.getDouble("balance");
			} else {
				throw new BusinessException("No account found with this ID: " + accountId);
			}
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal error occured contact SYSADMIN ");
		}
		return balance;
	}
	
	/**
	 * to get customer by searching email
	 * @param email
	 * @throws SQLException 
	 * @throws ClassNotFoundException
	 */
	@Override
	public CustomerAccount getCustomerByEmail(String email) throws BusinessException {
		CustomerAccount account = null;

		try (Connection connection = PostgresqlConnection.getConnection()) {
			String sql = "select * from bankapplication.t_customer inner join bankapplication.t_account on "
					+ "(bankapplication.t_customer.customer_id = bankapplication.t_account.customer_id) where "
					+ "bankapplication.t_customer.customer_email = ?;";

			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setString(1, email);

			ResultSet resultSet = ps.executeQuery();
			if (resultSet.next()) {
				account = new CustomerAccount();
				account.setAccountId(resultSet.getInt("account_id"));
				account.setCustomerId(resultSet.getInt("customer_id"));
				account.setBalance(resultSet.getDouble("balance"));
				account.setCreateDate(resultSet.getString("create_date"));
				account.setName(resultSet.getString("customer_name"));
				account.setApproved(resultSet.getString("approved"));
			} else {
				throw new BusinessException("No account found with this email!");
			}
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal error occured contact SYSADMIN ");
		}

		return account;
	}
	/**
	 * to get customer by searching customer ID
	 * @param customerId
	 * @throws SQLException 
	 * @throws ClassNotFoundException
	 */
	@Override
	public CustomerAccount getCustomerById(int customerId) throws BusinessException {
		CustomerAccount account = null;

		try (Connection connection = PostgresqlConnection.getConnection()) {
			String sql = "select * from bankapplication.t_customer inner join bankapplication.t_account on "
					+ "(bankapplication.t_customer.customer_id = bankapplication.t_account.customer_id) where "
					+ "bankapplication.t_customer.customer_id = ?;";

			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setInt(1, customerId);

			ResultSet resultSet = ps.executeQuery();
			if (resultSet.next()) {
				account = new CustomerAccount();
				account.setAccountId(resultSet.getInt("account_id"));
				account.setCustomerId(resultSet.getInt("customer_id"));
				account.setBalance(resultSet.getDouble("balance"));
				account.setCreateDate(resultSet.getString("create_date"));
				account.setName(resultSet.getString("customer_name"));
				account.setApproved(resultSet.getString("approved"));
			} else {
				throw new BusinessException("No account found with this ID");
			}
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal error occured contact SYSADMIN ");
		}

		return account;
	}
	/**
	 * For employee to approve a account which applied by customers
	 * @param customerId
	 * @throws SQLException 
	 * @throws ClassNotFoundException
	 *  */
	@Override
	public void approveAccount(int customerId) throws BusinessException {
		String sql = "update bankapplication.t_account set approved = true where customer_id = ?;";
		try (Connection connection = PostgresqlConnection.getConnection()) {
			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setInt(1, customerId);
			ps.execute();
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal error occured contact SYSADMIN ");
		}
	}

	/**
	 * For user log-in and use the bank services
	 * @param username
	 * @param password
	 * @throws SQLException 
	 * @throws ClassNotFoundException
	 */
	@Override
	public CustomerAccount getCustomerByUsernameAndPassword(String username, String password) throws BusinessException {
		CustomerAccount account = null;

		try (Connection connection = PostgresqlConnection.getConnection()) {
			String sql = "select * from bankapplication.t_customer inner join bankapplication.t_account on "
					+ "(bankapplication.t_customer.customer_id = bankapplication.t_account.customer_id) where "
					+ "bankapplication.t_customer.customer_login = ? and bankapplication.t_customer.customer_password = ?;";

			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setString(1, username);
			ps.setString(2, password);

			ResultSet resultSet = ps.executeQuery();
			if (resultSet.next()) {
				account = new CustomerAccount();
				account.setAccountId(resultSet.getInt("account_id"));
				account.setCustomerId(resultSet.getInt("customer_id"));
				account.setBalance(resultSet.getDouble("balance"));
				account.setCreateDate(resultSet.getString("create_date"));
				account.setName(resultSet.getString("customer_name"));
				account.setEmail(resultSet.getString("customer_email"));
				account.setDob(resultSet.getString("dob"));
				account.setApproved(resultSet.getString("approved"));
			} else {
				log.warn("Wrong username or password!");
				throw new BusinessException("No account found with this username and password!");
			}
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal error occured contact SYSADMIN ");
		}

		return account;
	}

	/**
	 * For customer to transfer money and update balance (subtract) and update account balance
	 * @param customer
	 * @param toAccount
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	@Override
	public void transferMoney(CustomerAccount customer, int toAccount, double amountToTransfer) throws SQLException, ClassNotFoundException {
		double balance;
		try(Connection connection = PostgresqlConnection.getConnection()) {
			balance = this.getBalanceByAccountId(customer.getAccountId());
			if (balance < amountToTransfer) {
				throw new BusinessException("You do not have sufficient funds!");
			}
			
			balance = balance - amountToTransfer; // new balance less transfer amount
			String sql = "update bankapplication.t_account set balance = ? where account_id = ?;";
			
			// update sender's balance
			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setDouble(1, balance);
			ps.setInt(2, customer.getAccountId());
			ps.executeUpdate();
			
			// update transaction table
			Date date = new Date();
			String trans_sql = "insert into bankapplication.t_transaction (transaction_id, from_account, to_account, amount, transaction_time, approved) "
					+ "values (default, ?, ?, ?, ?::date, false);";
			PreparedStatement transactionPreparedStatement = connection.prepareStatement(trans_sql);
			transactionPreparedStatement.setInt(1, customer.getCustomerId());
			transactionPreparedStatement.setDouble(2, toAccount);
			transactionPreparedStatement.setDouble(3, amountToTransfer);
			transactionPreparedStatement.setString(4, date.toString());
			transactionPreparedStatement.executeUpdate();
			
		} catch (BusinessException e) {
			e.printStackTrace();
		}
	}
/**
 * For employee to log-in and use the bank system
 * @param username
 * @param passward
 * @throws SQLException 
 * @throws ClassNotFoundException
 */
	@Override
	public Employee employeeLogin(String username, String password) throws BusinessException {
		Employee employee = null;

		try (Connection connection = PostgresqlConnection.getConnection()) {
			String sql = "select * from bankapplication.t_employee where "
					+ "bankapplication.t_employee.employee_login = ? and bankapplication.t_employee.employee_password = ?;";

			PreparedStatement ps = connection.prepareStatement(sql);
			ps.setString(1, username);
			ps.setString(2, password);

			ResultSet resultSet = ps.executeQuery();
			if (resultSet.next()) {
				employee = new Employee();
				employee.setEmployeeId(resultSet.getInt("employee_id"));
				employee.setEmployeeName(resultSet.getString("employee_name"));
				employee.setEmployeeEmail(resultSet.getString("employee_email"));
				employee.setEmployeeUsername(resultSet.getString("employee_login"));
				employee.setEmployeePassword(resultSet.getString("employee_password"));
			} else {
				log.warn("Wrong username or password!");
				throw new BusinessException("No account found with this username and password!");
			}
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal error occured contact SYSADMIN ");
		}

		return employee;
	}
	/**
	 * For employee to view transaction history
	 */
	@Override
	public List<Transaction> viewTransactionTable() throws BusinessException{
		List<Transaction> transactionList = new ArrayList<>();
		try (Connection connection = PostgresqlConnection.getConnection()) {
			String sql = "select * from bankapplication.t_transaction";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Transaction transaction = new Transaction();
				transaction.setTransactionId(resultSet.getInt("transaction_id"));
				transaction.setFromAccount(resultSet.getInt("from_account"));
				transaction.setToAccount(resultSet.getInt("to_account"));
				transaction.setAmount(resultSet.getDouble("amount"));
				transaction.setTime(resultSet.getDate("transaction_time"));
				transaction.setApproved(resultSet.getString("approved"));
				transactionList.add(transaction);
			}
			if (transactionList.size() == 0) {
				throw new BusinessException("No transaction in database so far");
			}
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal error occured contact SYSADMIN ");
		}
		return transactionList;
	}
	/**
	 * For customer to approve the transfer they received
	 * @param trasaction
	 */
	@Override
	public void approveTransfer(Transaction transaction) throws BusinessException {
		String approveSql = "update bankapplication.t_transaction set approved = true where transaction_id = ?;";
		String transferSql = "update bankapplication.t_account set balance = ? where account_id = ?;";
		
		try (Connection connection = PostgresqlConnection.getConnection()) {
			log.info("approving transaction....");
			PreparedStatement ps_approve = connection.prepareStatement(approveSql);
			ps_approve.setInt(1, transaction.getTransactionId());
			ps_approve.executeUpdate();
			log.info("getting your balance.....");
			//get balance
			double balance = this.getBalanceByAccountId(transaction.getToAccount());
			log.info("Your old balance: " + balance);
			balance = transaction.getAmount() + balance; //new balance value
			log.info("Your new balance will be: " + balance);
			log.info("adding funds to account");
			// add funds to receiving account
			// funds are automatically subtracted from sender when they transfer 
			PreparedStatement ps_transfer = connection.prepareStatement(transferSql);
			ps_transfer.setDouble(1, balance);  // add transfer amount to receiving acct balance
			ps_transfer.setInt(2, transaction.getToAccount());
			ps_transfer.executeUpdate();
			
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal error occured contact SYSADMIN ");
		}
	}

}
