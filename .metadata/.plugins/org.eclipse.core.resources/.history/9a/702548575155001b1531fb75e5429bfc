package com.bank.main;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Scanner;

import org.apache.log4j.Logger;

import com.bank.exception.BusinessException;
import com.bank.model.CustomerAccount;
import com.bank.model.Employee;
import com.bank.model.Transaction;
import com.bank.service.dao.impl.BankServiceDAOImpl;

/**
 * 
 * @author Melody
 *
 */
public class BankServicesMain {

	private static Logger log = Logger.getLogger(BankServicesMain.class);

	public static void main(String[] args) throws ClassNotFoundException, SQLException {

		Scanner sc = new Scanner(System.in);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		int selection = 0;
		System.out.println("Welcome to ABC Bank Service Application");
		System.out.println("=========================================");
		System.out.println("Enter 1 for Customer");
		System.out.println("Enter 2 for Employee");
		System.out.println("Enter 3 to create new customer account (one acct. per customer only)");

		selection = Integer.parseInt(sc.nextLine());

		int customerChoice = 0, employeeChoice = 0;

		switch (selection) {
		case 1:
			CustomerAccount customer = customerLogin(sc);
			handleCustomer(sc, customerChoice, customer);
			break;
		case 2:
			Employee employee = employeeLogin(sc);
			handleEmployee(sc, employeeChoice);
			break;
		case 3:
			createBankAccount(sc);
			break;
		default:
			System.out.println("Unrecognized choice");
			break;
		}
	} // end main

	public static void handleEmployee(Scanner sc, int employeeChoice) {
		do {
			displayEmployeeMenu();

			try {
				employeeChoice = Integer.parseInt(sc.nextLine());// if you enter special symbols
			} catch (NumberFormatException e) {

			}

			switch (employeeChoice) {
			case 1:
				log.info("Approve Customer Bank Account Application....");
				approveCustomerApplication(sc);
				break;
			case 2:
				log.info("View Accounts....");
				viewAccounts(sc);
				break;
			case 3:
				log.info("View Transaction History....");
				viewTransactionLog(sc);
				break;
			case 4:
				System.out.println("Exit....");
				break;
			default:
				System.out.println("Unrecognized choice");
				break;
			}
		} while (employeeChoice != 4);
	}

	public static void approveCustomerApplication(Scanner sc) {

		boolean continueProcessingAccounts = true;
		BankServiceDAOImpl bankServiceDaoImpl = new BankServiceDAOImpl();
		CustomerAccount customer = null;

		do {

			System.out.println("Enter a customer ID to approve: ");
			int customerId = Integer.parseInt(sc.nextLine());
			try {
				customer = bankServiceDaoImpl.getCustomerById(customerId);
				bankServiceDaoImpl.approveAccount(customerId);
				System.out.println("Account approved.");
			} catch (BusinessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("Continue processing (Y/n)?");
			String choice = sc.nextLine();

			if (!choice.equals("Y")) {
				continueProcessingAccounts = false;
			}

		} while (continueProcessingAccounts);
	}

	/**
	 * Customer approves transfers 
	 * @param sc
	 */
	public static void approveTransfers(Scanner sc, CustomerAccount customer) {
		boolean continueApprovingTransfers = true;
		BankServiceDAOImpl bankServiceDaoImpl = new BankServiceDAOImpl();
		List<Transaction> transactionList = null;
		
		do {
			try {
				transactionList = bankServiceDaoImpl.viewTransactionTable();
				
				for (Transaction transaction : transactionList) {
					if (transaction.getToAccount() == customer.getAccountId()
							&& transaction.getFromAccount() != customer.getAccountId()
							&& transaction.getApproved().equals("f")) {
						log.info(transaction);
						
						System.out.println("Approve above transfer (Y/n)?");
						String choice = sc.nextLine();
						
						if (choice == "Y" || choice == "y") {
							bankServiceDaoImpl.approveTransfer(transaction.getTransactionId());
						}
					}
				}
				
			
			} catch (BusinessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("Continue processing transfers (Y/n)?");
			String choice = sc.nextLine();

			if (!choice.equals("Y")) {
				continueApprovingTransfers = false;
			}
		} while (continueApprovingTransfers);
	}

	public static void handleCustomer(Scanner sc, int customerChoice, CustomerAccount customer) {
		do {
			displayCustomerMenu();
			try {
				customerChoice = Integer.parseInt(sc.nextLine());// if you enter special symbols

			} catch (NumberFormatException e) {

			}
			switch (customerChoice) {
			case 1: // withdraw
				withdraw(sc, customer);
				break;
			case 2: // deposit
				deposit(sc, customer);
				break;
			case 3: // view bal
				viewBalance(sc, customer);
				break;
			case 4: // transfer
				System.out.println("Transfer money....");
				break;
			case 5:
				System.out.println("Accept money....");
				break;
			case 6:
				System.out.println("Exit....");
				break;
			}
		} while (customerChoice != 6);
	}

	private static CustomerAccount customerLogin(Scanner sc) {
		CustomerAccount customer = null;

		System.out.println("Customer Log-in (use your username / password).");
		System.out.println("Username: ");
		String username = sc.nextLine();
		System.out.println("Password: ");
		String password = sc.nextLine();

		BankServiceDAOImpl bankDAO = new BankServiceDAOImpl();
		try {
			customer = bankDAO.getCustomerByUsernameAndPassword(username, password);
		} catch (BusinessException e) {
			log.warn("Invalid username or password!");
			System.out.println("Account cannot be found!");
			e.printStackTrace();
		}

		return customer;
	}

	private static Employee employeeLogin(Scanner sc) {
		Employee employee = null;

		System.out.println("Employee Log-in (use your username / password).");
		System.out.println("Username: ");
		String username = sc.nextLine();
		System.out.println("Password: ");
		String password = sc.nextLine();

		BankServiceDAOImpl bankDAO = new BankServiceDAOImpl();
		try {
			employee = bankDAO.employeeLogin(username, password);
		} catch (BusinessException e) {
			log.warn("Invalid username or password!");
			System.out.println("Account cannot be found!");
			e.printStackTrace();
		}

		return employee;

	}

//the employee menu
	private static void displayEmployeeMenu() {
		System.out.println(" Employee Menu");
		System.out.println("----------------");
		System.out.println("1) Approve Customer Bank Account");
		System.out.println("2) View Customer Bank Account");
		System.out.println("3) View Transaction History");
		System.out.println("4) Exit");
		System.out.println("Please enter appropriate choice between 1-4");
	}

	/**
	 * 
	 * @param sc Scanner
	 */
	private static void viewBalance(Scanner sc, CustomerAccount customer) {
		BankServiceDAOImpl bankServiceDaoImpl = new BankServiceDAOImpl();
		double balance;
		try {
			balance = bankServiceDaoImpl.getBalanceByCustomerId(customer.getCustomerId());
			log.info("Your balance is: " + balance);
		} catch (BusinessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * @param sc Scanner
	 */
	private static void deposit(Scanner sc, CustomerAccount customer) {
		BankServiceDAOImpl bankDAODeposit = new BankServiceDAOImpl();
		System.out.println("Please enter the deposit amount: ");
		double depositAmount = Double.parseDouble(sc.nextLine());

		if (customer != null) {
			try {
				bankDAODeposit.deposit(depositAmount, customer);
			} catch (BusinessException e) {
				e.printStackTrace();
			}
		}

	}

	private static void withdraw(Scanner sc, CustomerAccount customer) {
		BankServiceDAOImpl bankDAOWithdraw = new BankServiceDAOImpl();
		System.out.println("Please enter the withdraw amount: ");
		double withdrawAmount = Double.parseDouble(sc.nextLine());

		try {
			bankDAOWithdraw.withdraw(withdrawAmount, customer);
		} catch (BusinessException e) {
			e.printStackTrace();
		}
	}

	private static void viewAccounts(Scanner sc) {
		boolean continueViewingAccounts = true;
		BankServiceDAOImpl bankServiceDaoImpl = new BankServiceDAOImpl();
		CustomerAccount customer = null;

		do {
			System.out.println("Enter a customer ID to view: ");
			int customerId = Integer.parseInt(sc.nextLine());
			try {
				customer = bankServiceDaoImpl.getCustomerById(customerId);
				System.out.println(customer);
			} catch (BusinessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("Continue viewing customer accounts (Y/n)?");
			String choice = sc.nextLine();
			log.info(choice);
			if (!choice.equals("Y")) {
				continueViewingAccounts = false;
			}

		} while (continueViewingAccounts);
	}

	private static void displayCustomerMenu() {
		System.out.println(" Customer Menu");
		System.out.println("---------------");
		System.out.println("1) Withdraw");
		System.out.println("2) Deposit");
		System.out.println("3) View Balance");
		System.out.println("4) Transfer Money");
		System.out.println("5) Accept Money");
		System.out.println("6) Exit");
		System.out.println("Please enter appropriate choice between 1-6");
	}

	/**
	 * 
	 * @param sc
	 */
	private static void createBankAccount(Scanner sc) {
		System.out.println("Applying for a bank account....");
		CustomerAccount newCustomer = new CustomerAccount();

		// prompt for name
		System.out.println("Enter your name: ");
		String name = sc.nextLine();
		while (!isValidName(name)) {
			System.out.println("Invalid name! Please enter first and last name: ");
			name = sc.nextLine();
		}
		newCustomer.setName(name);

		// prompt for email
		System.out.println("Enter your email: ");
		String email = sc.nextLine();

		while (!isValidEmail(email)) {
			System.out.println("Invalid Email! example: test@mail.com: ");
			name = sc.nextLine();
		}
		newCustomer.setEmail(email);

		// username
		System.out.println("Enter your username: ");
		String userName = sc.nextLine();
		while (!isValidUsername(userName)) {
			System.out.println("Invalid userName! At least 5 letters, no special characters: ");
			name = sc.nextLine();
		}
		newCustomer.setUsername(userName);

		// pwd
		System.out.println("Enter your pwd: ");
		String pwd = sc.nextLine();

		while (!isValidPwd(pwd)) {
			System.out.println("Invalid password! Minimum eight characters, at least one letter and number: ");
			pwd = sc.nextLine();
		}
		newCustomer.setPassword(pwd);

		// prompt for starting bal
		System.out.println("Enter your starting balance: ");
		double bal = Double.parseDouble(sc.nextLine());

		while (!isBalancePositive(bal)) {
			log.warn("Balance cannot be negative, enter positive value!");
			bal = Double.parseDouble(sc.nextLine());
		}

		newCustomer.setBalance(bal);

		// prompt for dob
		System.out.println("Enter your dob (YYYY-MM-DD): ");
		String dob = sc.nextLine();
		while (!isValidDob(dob)) {
			System.out.println("Invalid DOB! Please enter valid DOB with format YYYY-MM-DD: ");
			name = sc.nextLine();
		}
		newCustomer.setDob(dob);

		BankServiceDAOImpl bankDAO = new BankServiceDAOImpl();
		try {
			bankDAO.createAccount(newCustomer);
			log.info("Your bank account has been created successfully!");
			log.info("Your account is pending and must be approved before use. Goodbye!");
		} catch (BusinessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public static boolean isValidName(String name) {
		return name.matches("[a-zA-Z]{0,20} [a-zA-Z]{0,20}");
	}

	public static boolean isValidEmail(String email) {
		return email.matches("[a-zA-Z0-9._]{2,20}@[a-zA-Z0-9._]{2,10}.[a-zA-Z]{2,6}");
	}

	public static boolean isValidPwd(String pwd) {
		return pwd.matches("^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$");
	}

	public static boolean isValidUsername(String userName) {
		return userName.matches("[a-zA-Z0-9._]{5,30}");
	}

	public static boolean isValidDob(String dob) {
		return dob.matches("[0-9]{4}-[0-9]{2}-[0-9]{2}");
	}

	public static boolean isBalancePositive(double balance) {
		boolean isBalancePositive = false;

		if (balance >= 0.0) {
			isBalancePositive = true;
		}

		return isBalancePositive;
	}

	public static void viewTransactionLog(Scanner sc) {
		BankServiceDAOImpl bankServiceDaoImpl = new BankServiceDAOImpl();
		try {
			List<Transaction> listOfTransactions = bankServiceDaoImpl.viewTransactionTable();
			if (listOfTransactions != null && listOfTransactions.size() > 0) {
				for (Transaction transaction : listOfTransactions) {
					log.info(transaction);
				}
			} else
				log.warn("No transaction found!");
		} catch (BusinessException e) {
			e.printStackTrace();
		}

	}
} // end class
